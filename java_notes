
11-26-2022
    ============unary operators===========:--> ++  -- (Unary Operators will reassign value to the variable)
          pre -->increase by 1  ++variable;
          post-->increase by 1  variable++;
 
          pre--> decrease    --variable;
          post-->decrease    variable--;
    
    ===========  comparison operators===========:-->to compare values-->boolean-->true/false
    ==        !=        >         <          >=     <= 
    
    char ch1='y';
    char ch2='e';
    ch1>=ch2==>boolean-->true/false based on their decimal values from Askii table
    
    ch1 != ch2==>yes ==>they are not same so its true==>true
    != not equal to,we use it when there is something we dont accept and anything else we accept
    ex:if the age of child is 10 they cannot participate
        int kidAge=10, canNotGo=10;
        boolean childCanGo=kidAge!=canNotGo;
        System.out.println("Is this kid can go or not? "+ childCanGo);
 
 
       ======== LOGICAL Operators========
              && (AND)          ||(OR)(PIPES)
 
        
        --------travel-------
        passport
        ticket
        visa
 
        passport && ticket 
 
        ---------party-------
        age
        dress
        age && dress
 
      ============ || (OR) ===============
      --buy--some flowers---
      cash || card ==>flowers
 
      ----down town--------
       drive || train || car || uber ||bus ||drive ||fly ||bike
 
 
11-27-2022
 
    -Practice Logical Operators and Comparison Operators== , != , <= , >= .
    -String
    -Scanner
 
    =================
    Comparison --> ==, !=, <=, >=.
    Logical Operators  -->  &&    ||  (combining thing)
       -will return/give back boolean data
       boolean r=5>4 && 3<5;
 
       &&              ||
       t-t->t          t||t->t
       t-f->f          t||f->t
       f-f->f          f||t->t
       f-t->f          f||f->f
 
 
-------------------------------------------------
    String 
       -immutable
       -text
       -is a class
       -concatenation
    String flower="RED";
    String flower1=new String("Blue");
 
        flower="White";
        -->flower1=>White
 
-------------------------------------------------
    Scanner
       -to input data from out of sourse code we are involving Scanner
       -we need to import the Scanner class into current class
       -scanner can take different data types
          -we used for String -->
 
      Scanner input = new Scanner(System.in);
      String bucket=input.next(); OR input.nextLine(); OR input.nextInt(); OR input.startsWith(); and so on, They are helpers
        
 
 
 
11-29-2022
String 
    -indexing (positioning)
    phone -->count/length-->5
    01234 -->indexing   -->0 to 4
 
    " "-space also has index number is smth;
 
    =========================================
    String Metods
    *return-->
    *parameter/s its a --> (the data we put in the parantesis)
 
       length(5);-->return-->int number as a count of characters on the string
       concat("day");-->return-->String because attach a String to an existing String
       chatAt(whole number);-->returns-->char from a given position on the String
       String str="phone";
       sr.charAt(4);-->e
 
    indexOf(); returns int as aposition of given character
       indexOf('p');-->0
       indexOf('e');-->4
       indexOf('v');-->-1--> indicates that given character is not on the string
 
 
 
12-3-2022
 
if -->decition making statement        
 
 
 
==========ARRAY=============
 
int [] agesOfTheStudent=new int[10];
agesOfStudent[0]=34;
agesOfStudent[1]=12;
agesOfStudent[2]=23;
agesOfStudent[3]=98;
agesOfStudent[4]=43;
agesOfStudent[5]=6;
agesOfStudent[6]=11;
agesOfStudent[7]=4;
agesOfStudent[8]=7;
agesOfStudent[9]=2;
 
*ARRay is using indexing
*Array has fixed capacity
 
================================
12-28-2022
 
object
method creation--why do you need a method? 
metod creation-->   public int name(){sout}
method signature --> name()
method overloading--> creating a method with same name with different parameter/s
*Method overloading has to happen in the same class
*Method overloading is a STATIC  Polymorphysm--Java will decide which method to run during compile time
 
 
calling a method-->creating a new object,the object.callmethod()
 
return-->return some data.primitives data will return primitives and store behind the sean.if void it will not return.
 
acces modifiers-->public,private,*default,protected.
 
parameter/s-->giving some value/data to this method,feeding the method.you create so and in main method you run it
 
 
1-3-2023;
static
constructor
wrapper class
from string to primitives
ArrayList
StringBuilder
Set
Map
...
===========================
access modifiers-->public, protected, default, private
object -->is example from the class,gives you ability to reach out methods from that class
method signature
method overloading-->creating multiple methods with same name but different parameters(/)
  -polymorphysm:--> static polymorphysm java will know which method to run during the compile time(ex:overloading)
calling method -->creating method using that class and using dot.to call that method from that class
return-->will return data,but will not print void data will not return anything
   return type-->void
                 primitives
                 object
ex:public String test(int num){
    return "abcd";
}
  
 
  3 ways to initialize instance variables
  -1 by using a new object
  -2 in the Class in the method we can initialize setAge ex:
  public void setAge(int age1){
        age=age1;
    }
  -3 just initializing it and giving a default value
 
  ===========STATIC=====================
  -if a varibale or method is static:
  -that is belong to the class
 
  -static methods can be called by ClassName
  MethodPractice.veggieFilter();
 
  -static methods can be called into another static method without object if they are in the same class
 
  ===========CONSTRUCTOR================
  1.Constructor is a spesial method to initialize the object
     
     old creration of object: Dog dog=new Dog(); <-- no parameter constructor
                              
                              dog.play(4);<--giving parameters to the constructor
                              
     new way of creating an object: public Dog(){} //no argument/parameter constructor
 
             
 
   Syntax of constructor:
   
              public class Dog{
 
              String name;
              int age;
   
              public Dog(){} //no argument/parameter constructor
 
              }
                             
 
  2.Constructor is a special method has no return type
  3.Constructor is called when object created
  4.Constructor should be same with the class name
  5.Constructor is not a member of the class
  6.Every class has constructor 
     -either default ()constructor OR constructor that you created(String str,int num)
 
public class Car{
    String model;
    double price;
 
    public CAr(){}
    
    public Car(String model){
    this.model=model;
 
    public Car(double price){
     this.price=price;
     }
   }
}
*this-->keyword-->referring to the current class
*this()--> reffering to the current class constructor
 
-------------method overloading-------------
can we overload static methods?     yes,we can.
 
===================================================
different ways of initializing instance variables
-4 ways to do that
   -by using the object
   -declare and initialize 
   -by constructor
   -by method()
 
constructor: We use it to create object
             Use it to ititialize instance variables by passing parameters
             You can overload constructor 
             NO return type
             Has to take same name of the class
             Not a member of the class
             Every Class by default will have a constructor either you create it or not
             
             example:
              class Car{
 
              Sting model:
              double price
 
             public Car(){} <------ no argument constructor
 
             public Car(String model){
             this.model=model;
             }
 
              } *this -> keyword -->refering to the current class instance variable
                *this() -->refering to current class constructor RULE:has to be first and only in constructor
 
public String toString(){    <---------    we use this method to print out object with no hashcode
                                              and return whatever we want it to return
     return "***" ;
 }
 
 
 ===============================WRAPPER CLASSES=============================
 object type of primitives
 
 PRIMITIVES   --   WRAPPER
 
 byte              Byte           Byte number = new Byte();
 short             Short
 int               Integer        Integer number=new Integer();  OR   Autoboxing:Integer number=9;
 long              Long
 float             Float      
 double            Double
 boolean           Boolean
 char              Character
 
 the advantage of going from primitives to Class Version of them is to create own methods
 ex: Integer apple=9;
     apple.
 
int a=9;   -->  Integer number1= new Integer();
 
Autoboxing -->  Integer number2=4;     <<------------Autoboxing.
 
UnBoxing   -->  from Object to primitives Integer number2=4; int a=number2;
 
 
 
 
 
 
 
 
 
1-4-2023
static -->keyword --> that belong to the class (sharable)--> if not static every field has its own value.
*if a method is static -->you can call that static method by using class name 
 
to reach out any method from the any Class, we need to create that object and reach out that Class's methods
OR
we can reach out by the Class name and reach out the static methods.
 
 
 
===========================ARRAY LIST=======================
 
                         C O L E C T I O N 
 
  LIST(Interface)         SET(Interface)          MAP(Interface)
  ArrayList               HashSet                 HashSet  
                          LinkedHashSet           LinkedHashMap
                          TreeSet                 TreeMap
 
===============Array============================================ArrayList===========
int[] a ={12,23,56};                         List is Parent and ArrayList is a Child
Specific thing about array is:              Specific Things about ArrayList it is a Class of List Interface
  -indexing                                  -indexing
  -multidimentional                          -Object Type NOT primitives
  -capacity is fixed                         -capacity is flexible/dinamic
  -has default value                         -order is sequence(same order as you implement)
                                             
  methods:                                            How to creater ArrayList?
 
  Arrays.toString();                        ArrayList list1 = new ArrayList<>();
  Arrays.sort();                            ArrayList list2 = new ArrayList(3);
  Arrays.deeptoString();                    ArrayList <Integer> list3 = 
  new ArrayList();
  Arrays.binarySearch();
 
Array List will kepp the order we give 'order insertion'
 
size();  add(); remove();  clear();  addAll();  set();->replace the element at given index  
 
 
 
 
1-10-2023
 
================================================SET=======================================
** It will store elements only one time/no duplicates
** objects
** there is not get();
** all types of sets do not hold order for their elements
 
Set is an Interface
-HashSet
-LinkedHashSet
-TreeSet
 
HashSet set1=new HashSet();  <---------()is parameter constructor for HashSet;
HashSet <DataType> set2=new HashSet
Set <DataType> set3=new HashSet
Set <String> set4=new HashSet<>();
 
 
 
 
 
1-11-2023
 
============================================MAP=============================================
** key-value is one element
** no duplicate keys,no same reference-->map is using set for it's key stracture
** {}
** values can be duplicate
** it stores the value based on the key
** Map is an Interface so directly from the map you can not create Object
 
Map map1=new HashMap();
 
Map map2=new LinkedHashMap();
 
Map map3=new TreeMap();
 
HashMap <Integer,String> map4=new HashMap();
 
put();-->add the data to the map   ---->  map.put(2,"D"); -->it will take "D" as value and 2 is its key;
get();-->it takes key as parameter and returns value
 
 
                          
  String str="Ahmed loves Java";
        String reserve="";
         char ch;
         for( int i=0;i<str.length();i++){
             ch=str.charAt(i);
             reserve=ch+reserve;
         }
        System.out.println(reserve);
 
 
Html+CSS is writing languages they go along with Java script 
html is a language script ffjvlflfbl+Java is a programming language 
we have studied javba for the past 3
we have studied java for the last 3 month and i love it 
 
 
 
 
 
 
 
 
 
  1-17-2023  THIS ALL ARE JUST A FOR A DESIGH !!!
  -access modifiers
   4 types:
   -public-->in the same project
   -private-->not reachable from other class .only reachanble int he same class
   -defaul-->in the same package 
   -protected-->same class
 
   blocks:
   {}-->instance-->triggered for each object
   *you can use instance block to initialize instance variable
 
   static{}-->static
   *will be triggered only one time for that class
   *you can use static block to initialize static variables
 
   -encapsulations-->to hide data
   -->all variables as private
   we use "Setters"&"Getters" are used to give access through those methods()
   we create se and get method and then reaching out to them through object
   !!!short cut!!!TO CREATYE CONSTRUCTOR right click,on inteliJ you will see generate option then you will see generate getter and setter
 
   -------------------------------------------------------------------
   -STRING BUILDER-
   -muttable-changable
   -to be abble to give a value we use .APPEND() it is a method that comes from StringBuilder class
   methods:
   append
   charAt
   indexOf
   contyains
   lenghth
   substring 
   replace 
   insert
   delete
   delete charAt 
 
1-18-2023
 
-------TASK-------
"create a method
pass a string builder parameter to the method
that method will return sum of digits from given StringBuilder object
"AFA@$%adfg56y2L"==>5+6+2-->13
 
===================OOP CONCEPT================
 
Encapsulation
 
Inheritance
 
Abstraction
    Abstract Classes
    Interfaces
 
Polymorphysim
 
-------------------Inheritance-------------------
-> It is Parent-Child relationship    
-> from Parent to the Child
 
class?
object?
member of class
access modifiers
return types for methods
constructors
 
-> child class ->sub-class
-> parent class ->super-class
*'extends'-->keyword will be used to make the connection/parent-child relation
 
class Parent{
    
} 
class Child extends Parent{
 
 }
=============================================================
-you can have inheritance from parent to child,not from child to parent 
-you can NOT have inheritance from/to Siblings
-you can have single level inheritance
-you can have multiple level inheritance
-you can have multiple child classes from same parent
=============================================================
--------------------Method Overriding---------------------
-it has to happen in parent child relationship
    ->method overriding happens in child classes
 
-method name and parameter has to be same
-access modifier in the overriding method should be same or more accessible
-return type in the overriding method should be same or co-varient
 
@Override
behavior in Parent class u change its behavior in Child class 
 ex:Parent has a method
    @Override changes Parent's method to its own implementation
 
------------------Method Overloading---------------------    
-happens in the same class
 
 
 
 
 
 
1-21-2023
===========inheritance=============
 
parent child class relation 
suoer and subclass re;ation
 
->extends
 
class Child extends Parents{}
->you can have multiple level of inheritance
->you can have single level of inheritance
->you canNOT have inheritance from siblings
 
==========METHOD OVERRIDING===========
*method overriding happens in the CHILD classes
*name and parameters has to be same
*return type of the method has to be same or co-varient
*access modifiers has to be same or more accessable
 
-------parent---------
public Integer run(int miles){
    
    return miles*100;
}
 
-------child----------
public Integer run(int miles){
    
    return 8*9;
}
=============================
-------parent---------
public Number run(int miles){
    
    return miles*100;
}
 
-------child----------
public Integer run(int miles){
    
    return 8*9;
}
 
====================================================
CONSTRUCTOR    !!!Interview question!!!
 
this ------>   is equal with instance variable ,referce to the class
this()----->  referce to the constructor to that class 
super
super----->referce to the parent class
super()---->referce to the parent class constructor
 
{
this();
//implementation
 
}
 
Vehicle 
  Variables:
    protected  model;
    default year;
    public brand;
  Methods:
    move(); --> vehicle is moving
    stop(); --> return true, vehicle is stopping
    protected start(); --> return true, vehicle is starting
    default accelerate(); --> return <OneOfObject-Vehhicle_Car>
  Constructor: create a constructor to initiliaze instance variables
-Car 
  *extends Vehicle
  variables:
    model;
    engineType;
  Methods:
    Override move(); --> Car is moving
    Override accelerate(); --> return Integer and calls model from parent class
    Class
 
    ============Static===========
 
    -----T------
    static int a =9;
 
    -----W------
    T.a=6;
 
    ============Final=============
    is keyword
 
    ============finalize()==========
    is methos that works with garbage collectors System.gc();
 
 
    1-22-23
 
    inheritance:
 
    static keyword -> variable
                   -> method -->cannot override static method
 
    constructor -> if we have constructor in a parent class,we shoukd inherit that constructor in the child class
       -once you call parent constructor in the child class constructor,you can initialize super class constructor parameters directly or just leave it with reference of parameters
 
    this --- this means refer to the current class instance variables,its ok to use in any class,call reach out methods and parantesis
    this() -- this is also current class you are in, this one will reach out constructor   
    -------------------------------------
    super -- parent class -->variables or methods
    super()--parent class -->constructor
    -------------------------------------
    final --> keyword --> to make variables,methods or class as final
    if variable is final -> you can not reassign value
                         -> name or variable should be written with uppercase character
 
     method -->cannot override final method
            -->can be overloaded
 
    class   -->you can Not extend final classes
    ------------------------------------
    finalize()  -->method --> is working with garbage collector call 
                          --> once you call gc()mehtod from the System and you want tomake sure that gc()is called and working,you can override finalize() method to check that gc is triggerred
    gc(); System.gc();  --> it will remove object that do not have value/reference to the garbage
 
 
 
 
 
1-24-2023
=====OOP=====they are all related with Inheritance Parent-Child relation===========
-Inheritance
 
-Encapsulation
 
-Abstraction:reducing complexity,increasing efficiency
   
   2 ways to achive abstraction:
    1)abstract class
     -parent-child relation --> inheritance
     -you should use extends keyword to make parent child relation
     -Abstract Class can have abstract and non-abstract methods
     -what is abstract method-->it is a method without implementation
     abstract method; -------------------abstract void run();
     -non-abstract method?-->it is a method that has implementation ----------- void run();
     -you cannot create object from abstract classes
     -concrete class:concrerate classes are non abstract classes
     *concreate classes they have to implement all abstract methods.
     *they are the first level child from classes from abstract classes 
     *first child called concreate class
 
 
    2)interface:
    -all variables are final,public,static,abstract.
      -cannot reassign 
      -declaration and initialization has to happen right away
    -access modifiers are public by default (if not access modifier it it public then
    Example:  String DAY="Tuesday";   'public by default'
    -All methods are astract by default,but there is couple exeption by method with a default....
    -with help of interface, one child class can have multiple parent interfaces
    -you can not create object from interface
    -keyword 'implements' is the keyword to create parent and child relation
 
-final- we can use for methopds,variables and classes
-void- is return type keyword
-method overriding- in subclass we override method from parent class only code has to be different
-this-refers to this class variables 
-this()-
-super-from child refer to parent class constructor
-super-
 
 
parent class is a super class
child class  is a sub class
independent class
 
 
 
-Polymorphism
 method overloading-->   is a static polymorphysm  -->java will decide which method to call during compile time,
during the run time,selection of method will not change
-method overriding -->   dynamic polymorphysm  -->java will decide which method to call during run time
-Objects in Java can have differnt forms depend on Parents or Grandparent
 
 
 
class Exersise{}
static void run(){*}
 
static void run(int km){$}
 
void jump(){  !! }
}
 
class Gym {
    
    void jump(){,,}
}
-----------
2 differnt options to reach out methods 
Exercises.run(); --> *
Exercises.run(int km);-->$
 
 
Gym gym=new Gym(){
    
    gym.jump();
} 
 
Dinamic 
 
In Java:
you can create object in 3 different ways
1-Reference and object can be the same type
  Bank bank=new Bank();
2-  
 
3-
 
 
 
=============Exeption=Exept=================
everything would work but not 100 procent something might not work as expected
 
HANDLEING EXEPTIONS
ArithmeticException   to continue running      
try-catch block 
try{
    int number =10;
      int result=number/0;     //ArithmeticException
        System.out.println(result);
        }catch(ArithmeticException exeption){}
 
 
 
1-15-2023
 
-polymorphysm
    -static  ->overloading method
    -dynamic ->overriding method
   
    ----------------------------------
   3 waysto create object
   - reference and object can be different or same      
   - reference is parent,object is child type
   - reference is interface,object is child type 
 
-exception-
-Checked Exeptions --> IO Exeptions
-Unchecked Exeptions--> RunTime Exeptions
 
try-catch blocks ,  we can have multiple try and catches
    try{
    //coding
    }catch(ArithmethicException e,){
    //informative exeption messages 
    //exeption trace
    }       run ur code to be able to catch exeption and do your thing
 
TRACE(STACK TRACE or EXEPTION MESSAGES) term (exeption errors)-once you code, the code what do u see at the end at execution  
if we will have multiple catches it should go from child to Parent like Ariphmethic Exeption and then Run time exeption
 
you can have one try block with one catch block
you can have one try block with multiple catch blocks 
you can have multiple try and catch blocks in same class or same method
*if there is multiple catch block attached to a single block exeption type in the catch block should go from child stype to parent type.
 
======================
final  --> keyword-->variables,methods,class
 
finalize()--> method that works with garbage collector method
 
finally --> block --> they works with try-catch block
 
throws is a keyword to cover unhandles files error FileNotFoundException
 
throw -> keyword ->you can use this keyword 'throw' to throw/create a new exeption
 
Thread.sleep(3000); //is to make your execution wait ,developers doesnt want to use it coz it slows down the code
 
 
 
 
 
 
 
 
 
 
 
       ====================================ABSTRACTION===============================================
       -Abstract classes and Interface are both abstraction.
       we use it to reduce complexity,improve efficency
 
       -Abstract Classes WE CREATE METHOD IN THE PARENT CLASS AND OVERRIDE IN CHILD CLASS 
          -->'abstract' keyword has to be used to create Abstract class or Abstract methods \
          you cannot create direct objects
 
       *first level childs from Abstructs class is called 'Concreate' class.Concrete class must have implement all abstract methods from parent class.
       *Concrete classes 
       * abstract methods can not be private 
       *if the child is also abstract it doesnt have to implement parents abstraction methods 
 
------------------------------------------------------------------------------------------
     primitives do not have co-varient type for return type
     ------------------------------------------------------
 
 
     ==================================INTERFACE===================================
      *By using interface classes we can have abstractions 
      *By using interface classes we can have multiple parent class for a sub-class
      *in the interface class,all methods will be abstract by default
      *IN THE INTERFACE ALL INSTANCE VARIABLES ARE FINAL
      *in the Interface you dont need to say 'final' to make it final by default
      *In the Interface all instance variables and methods are public by default 
      *in the Interface instance variables are 'static'
      *redandant is by default
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
         ; semicollon 
         : collumn 
         {curly braces}
         [brackets]
         (paranthesies)
         /forward slash 
         \backword slash
         "doble qutes"
         'singe quotes'
         . dot
         ,coma 
         /devide
         @at 
         _under line
         ~tilda
20/11/22
 
Arthogm
1.
 
  =====================================QUESTIONS============================================
  System.out.println("What is you home address? ");//5654 w melrose st contains numbers and strings
        int address=input.nextInt();               //what should i use int or string?
        System.out.println("Your address is "+address);




